from instances import EC2Instances
from snapshots import EC2Snapshots
from volumes import EC2Volumes
from datetime import datetime

"""
TODO:
List volume count per instance
List snapshot count per volume

"""


class EC2Manager:
    def __init__(self):
        self.instances = EC2Instances()
        self.volumes = EC2Volumes()
        self.snapshots = EC2Snapshots()

    def get_total_instance_count(self) -> int:
        """Returns the total number of instances"""
        return self.instances.get_total_instances()

    def get_total_volume_count(self) -> int:
        """Returns the total number of volumes"""
        return self.volumes.get_total_volume_count()

    def get_total_snapshot_count(self):
        """Returns the total number of snapshots"""
        return self.snapshots.get_total_snapshot_count()

    def get_total_windows_instances(self):
        """Returns the total number of windows instances"""
        return self.instances.get_total_windows_instances()

    def get_total_linux_instances(self):
        """Returns the total number of linux instances"""
        return self.instances.get_total_linux_instances()

    def describe_instances(self):
        """Describes all instances"""
        for instance in self.instances:
            print("-Instance Name: " + instance.tags[0].get("Value"))
            print("|\tID: " + instance.id)
            print("|\tType: " + instance.instance_type)
            print("|\tState: " + instance.state.get("Name"))
            print("|\tPublic DNS: " + str(instance.public_dns_name))
            print("|\tPublic IP: " + instance.public_ip_address)
            print("|\tPrivate DNS: " + instance.private_dns_name)
            print("|\tPrivate IP: " + instance.private_ip_address)
            print("|\tLaunch Time: " + str(instance.launch_time))
            print("|\tPlacement: " + instance.placement.get("AvailabilityZone"))
            print("|\tVPC ID: " + instance.vpc_id)
            print("|\tSubnet ID: " + instance.subnet_id)

    def describe_volumes(self):
        """Describes all volumes"""
        for volume in self.volumes:
            print("-Volume Name: " + volume.tags[0].get("Value"))
            print("|\tID: " + volume.id)
            print("|\tSize: " + str(volume.size) + "GB")
            print("|\tState: " + volume.state)
            print("|\tType: " + volume.volume_type)
            print("|\tIops: " + str(volume.iops))
            print("|\tEncrypted: " + str(volume.encrypted))
            print("|\tAttachments:")
            for attachment in volume.attachments:
                print("|\t\t- Instance: " + attachment.get("InstanceId"))
            print("|\tAvailability Zone: " + volume.availability_zone)
            print("|\tTags: " + str(volume.tags))

    def describe_snapshots(self):
        """Describes all snapshots"""
        for snapshot in self.snapshots:
            print("-Snapshot Name: " + snapshot.get("Tags")[0].get("Value"))
            print("|\tID: " + snapshot.get("SnapshotId"))
            print("|\tVolume ID: " + snapshot.get("VolumeId"))
            print("|\tState: " + snapshot.get("State"))
            print("|\tStart Time: " + str(snapshot.get("StartTime")))
            print("|\tProgress: " + snapshot.get("Progress"))
            print("|\tVolume Size: " + str(snapshot.get("VolumeSize")) + "GB")
            print("|\tDescription: " + snapshot.get("Description"))
            print("|\tOwner ID: " + snapshot.get("OwnerId"))
            print("|\tTags: " + str(snapshot.get("Tags")))

    def list_snapshot_count_by_volume(self):
        """Lists snapshots by volume ID"""
        volumeIDs = self.volumes.get_volume_ids()

        for id in volumeIDs:
            print("-Volume ID: " + id)
            [
                print(
                    "total snapshots: "
                    + str(self.snapshots.get_snapshot_count_by_volume_id(id))
                )
            ]


def print_report():
    manager = EC2Manager()
    instances = [
        instance for instance in manager.instances.describe_running_instances()
    ]
    volumes = manager.volumes.describe_volumes()
    snapshots = manager.snapshots.get_snapshots()
    """Prints a report to a markdown file"""
    header = "# XATOR AWS EC2 REPORT\n\n"
    instancesTotals = f"## INSTANCES\n\nTotal Instances: {manager.get_total_instance_count()}\n\nTotal Windows Instances: {manager.get_total_windows_instances()}\n\nTotal Linux Instances: {manager.get_total_linux_instances()}\n\nTotal Running Instances: {manager.instances.get_total_running_instances()}\n\nTotal Stopped Instances: {manager.instances.get_total_stopped_instances()}\n\n"
    volumesHeader = """## VOLUMES\n\n"""
    volumesTotals = f"Total Volumes: {manager.get_total_volume_count()}\n\n"
    snapshotsHeader = """## SNAPSHOTS\n\n"""
    footer = "#### END OF REPORT\n\nThis report was generated by Justin Moore for Skip Davidson\n\n"
    with open("report.md", "w") as f:
        f.write(header)
        f.write(instancesTotals)
        for instance in instances:
            f.write("### " + instance["Name"] + "\n\n")
            f.write("---\n\n")
            f.write("| Instance ID | Private IP | State | Platform Details |\n")
            f.write("| ----------- | --------- | ----- | ---------------- |\n")
            f.write(
                "| "
                + instance["Instance ID"]
                + " | "
                + instance["Instance Type"]
                + " | "
                + instance["Private IP"]
                + " | "
                + instance["State"]
                + " | "
                + instance["Platform Details"]
                + " |\n\n"
            )
        f.write(volumesHeader)
        f.write(volumesTotals)
        for volume in volumes:
            f.write("### " + volume["Name"] + "\n\n")
            f.write("---\n\n")
            f.write("| Volume ID | Volume Size | State | Type | Iops | Encrypted |\n")
            f.write(
                "| ---------- | ----------- | ----- | -----| ------- | -------- |\n"
            )
            f.write(
                f"| {volume['ID']} | {volume['Size']} | {volume['State']} | {volume['Type']} | {volume['Iops']} | {volume['Encrypted']} |\n\n"
            )
        f.write(snapshotsHeader)
        f.write("Total Snapshots: " + str(manager.get_total_snapshot_count()) + "\n\n")
        for volume in volumes:
            f.write("### Volume:" + volume["Name"] + "\n\n")
            f.write("---\n\n")
            f.write(
                f"Total snapshots for volume {volume['ID']}: {manager.snapshots.get_snapshot_count_by_volume_id(volume['ID'])}\n\n"
            )

        f.write(footer)
        f.write("Date: " + str(datetime.now()) + "\n")


def main():
    man = EC2Manager()
    print_report()


if __name__ == "__main__":
    main()
